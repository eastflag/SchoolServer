<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aura.smartschool.persistence.MobileMapper">

<select id="selectHome" parameterType="Home" resultType="Integer">
	SELECT count(*) FROM HOME
	WHERE home_id = #{home_id}
</select> 

<select id="selectMember" parameterType="Member" resultType="Member">
	SELECT * FROM MEMBER
	WHERE  1=1
		<if test="mdn != null">and mdn=#{mdn}</if>
		<if test="member_id != null">and member_id=#{member_id}</if>
</select>

<select id="signIn" parameterType="Member" resultType="Member">
	SELECT * FROM member
	WHERE mdn=#{mdn} and home_id=#{home_id};
</select>

<select id="selectMemberList" parameterType="Home" resultType="Member">
	SELECT 
		M.member_id, M.home_id, M.mdn, M.gcm_id, M.is_parent, M.name, M.relation, M.photo, M.school_grade, M.school_class,
		M.birth_date, M.sex,
		S.school_id, S.School_name, 
		CAST(AES_DECRYPT(unhex(S.address), 'aura') AS CHAR(500)) as 'address', 
		CAST(AES_DECRYPT(unhex(S.new_address), 'aura') AS CHAR(500)) as 'new_address', 
		CAST(AES_DECRYPT(unhex(S.lat), 'aura') AS CHAR(20)) as 'lat', 
		CAST(AES_DECRYPT(unhex(S.lng), 'aura') AS CHAR(20)) as 'lng',
		S.homepage,
		S.contact
	FROM member M left join school S on M.school_id = S.school_id
	WHERE M.home_id = #{home_id}
</select>
	
<insert id="insertHome" parameterType="Home">
	INSERT INTO home(home_id) values(#{home_id});
</insert>

<insert id="insertMember" parameterType="Member">
	INSERT INTO 
		MEMBER(home_id, mdn, gcm_id, is_parent, name, relation, photo, school_id, school_grade, school_class, sex, birth_date) 
		values(#{home_id}, #{mdn}, #{gcm_id}, #{is_parent}, #{name}, #{relation}, #{photo}, 
		<choose>                                                                                                  
			<when test="school_id == 0">                                                                     
				null,                                                                                  
			</when>                                                                                               
			<otherwise>                                                                     
				#{school_id},                                                                                
			</otherwise>                                                                                               
		</choose> 
		#{school_grade}, #{school_class}, #{sex}, #{birth_date});
</insert>

<update id="updateMember" parameterType="Member">
	UPDATE MEMBER
	<set>
		<if test="mdn != null">mdn=#{mdn},</if>
		<if test="name != null">name=#{name},</if>
		<if test="relation != null">relation=#{relation},</if>
		<if test="photo != null">photo=#{photo},</if>
		<if test="school_id != null">school_id=#{school_id},</if>
		<if test="school_name != null">school_name=#{school_name},</if>
		<if test="school_grade != null">school_grade=#{school_grade},</if>
		<if test="school_class != null">school_class=#{school_class},</if>
		<if test="sex != null">sex=#{sex},</if>
		<if test="birth_date != null">birth_date=#{birth_date}</if>
	</set>
	WHERE member_id = #{member_id} 
</update>

<update id="updateGcmId" parameterType="Member">
	UPDATE MEMBER
		set gcm_id = #{gcm_id}
	WHERE home_id = #{home_id} and mdn = #{mdn}
</update>

<insert id="insertLocation" parameterType="LocationVO">
	INSERT INTO 
		LOCATION(member_id, lat, lng, address) 
		values(#{member_id}, 
			HEX(AES_ENCRYPT(#{lat}, 'aura')),
			HEX(AES_ENCRYPT(#{lng}, 'aura')), 
			HEX(AES_ENCRYPT(#{address}, 'aura'))
		);
</insert>

<select id="selectLastLocation" parameterType="Member" resultType="LocationVO">
	SELECT 
		member_id,
		CAST(AES_DECRYPT(unhex(address), 'aura') AS CHAR(500)) as 'address', 
		CAST(AES_DECRYPT(unhex(lat), 'aura') AS CHAR(20)) as 'lat', 
		CAST(AES_DECRYPT(unhex(lng), 'aura') AS CHAR(20)) as 'lng',
		CREATED_DATE
	FROM LOCATION
	WHERE member_id = #{member_id} and created_date >= curdate()
	ORDER BY CREATED_DATE desc
	LIMIT 1;
</select>

<select id="selectLastHomeLocation" parameterType="Home" resultType="LocationVO">
	SELECT location_id, member_id, lat, lng, created_date 
	from lat
	(select * from location
	where member_id in (select member_id from home where home_id = '길동이네집')
	order by created_date desc ) A
group by member_id;
</select>

<select id="selectLocationList" parameterType="Member" resultType="LocationVO">
	SELECT 
		CAST(AES_DECRYPT(unhex(address), 'aura') AS CHAR(500)) as 'address', 
		CAST(AES_DECRYPT(unhex(lat), 'aura') AS CHAR(20)) as 'lat', 
		CAST(AES_DECRYPT(unhex(lng), 'aura') AS CHAR(20)) as 'lng',
		CREATED_DATE
	FROM LOCATION
	WHERE member_id = #{member_id} and
		 created_date > date_format(curdate( ), '%Y-%m-%d %H:%i:%s' ) 
	ORDER BY CREATED_DATE asc
</select>

<select id="selectSchoolById" parameterType="Integer" resultType="SchoolVO">
	SELECT *
	FROM school
	WHERE school_id = #{school_id}
</select>

<select id="selectSchoolList" parameterType="SchoolVO" resultType="SchoolVO">
	SELECT *
	FROM school
	WHERE school_name like CONCAT(#{school_name},'%')
	order by school_name asc
</select>

<insert id="insertSchool" parameterType="SchoolVO">
	INSERT INTO school(
			school_name,
			gubun1,
			gubun2,
			zipcode,
			address,
			new_address,
			lat,
			lng,
			homepage,
			fax,
			contact,
			sido,
			gugun,
			support) 
		VALUES (
			#{name},
			#{gubun1},
			#{gubun2},
			#{zipcode},
			#{address},
			#{new_address},
			#{lat},
			#{lng},
			#{homepage},
			#{fax},
			#{contact},
			#{sido},
			#{gugun},
			#{support})
</insert>

<insert id="insertArea" parameterType="AreaVO">
	INSERT INTO AREA_INFO (
		lat, lng, category, title, content, picture)
		VALUES(#{lat}, #{lng}, #{category}, #{title}, #{content}, #{picture});
</insert>

<select id="selectAreaList" resultType="AreaVO">
	SELECT id, lat, lng, category, title, content FROM AREA_INFO;
</select> 

<select id="selectArea" resultType="AreaVO">
	SELECT * FROM AREA_INFO
	WHERE id = #{id};
</select> 

<select id="selectBodySummary" parameterType="Member" resultType="BodyMeasureSummary">
	select member_id, measure_date, height, weight, bmi, muscle, skeletal, weight_Control, fat_Control, fat, waist, growthGrade, ppm, cohd from 
		(select 
			measure_info.member_id,
			measure_info.measure_date,
			measure_info.smoke_seq,
			truncate(inbody_info.HEIGHT, 1) AS height,
			truncate(inbody_info.Weight, 1) AS weight,
			truncate(inbody_info.BMI, 2) AS bmi,
			inbody_info.Percent_Body_Fat AS fat,
			truncate(inbody_info.Soft_Lean_Mass, 1) AS muscle,
			truncate(inbody_info.Skeletal_Muscle_Mass, 1) AS skeletal,
			truncate(inbody_info.weight_Control, 1) AS weight_Control,
			truncate(inbody_info.fat_Control, 1) AS fat_Control,
			truncate(inbody_info.Waist_Hip_Ratio, 3) AS waist,
			truncate(inbody_info.Fitness_Score, 0) AS growthGrade
		FROM 
			measure_info, inbody_info
		where
			measure_info.member_id = #{member_id} and
			measure_info.inbody_seq = inbody_info.inbody_seq) inbody 
		LEFT OUTER JOIN smoke_info 
		ON inbody.smoke_seq = smoke_info.smoke_seq
	ORDER BY measure_date desc;
</select>

<select id="selectGradeBySection" parameterType="BodyMeasureGrade" resultType="BodyMeasureGrade">
select 
	ms_grade_data.Ms_Grade_ID as gradeId,
	ms_grade_data.Srandard_Grade as gradeDesc,
	ms_grade_data.Section as section,
	#{value} as value,
	ms_grade_data.Grade_ID as schoolGradeId,
	ms_grade_data.sex as sex,
	standard_data.Year as year
from
	healthcare_gwangmyeong.ms_grade_data,
	healthcare_gwangmyeong.standard_data
where
	healthcare_gwangmyeong.ms_grade_data.Grade_ID = #{schoolGradeId}
		and healthcare_gwangmyeong.ms_grade_data.sex = #{sex}
		and healthcare_gwangmyeong.ms_grade_data.Section = #{section}
		and healthcare_gwangmyeong.standard_data.Year = #{year}
		and healthcare_gwangmyeong.standard_data.Ms_Grade_ID = ms_grade_data.Ms_Grade_ID
		and healthcare_gwangmyeong.standard_data.Start_Int &lt;= #{value}
		and healthcare_gwangmyeong.standard_data.End_Int &gt; #{value};
</select>

<select id="selectSmokerGrade" parameterType="string" resultType="BodyMeasureGrade">
select 
	smoke_data.Smoke_Data_ID as gradeId,
	smoke_data.DISCRIPTION as gradeDesc
from
	healthcare_gwangmyeong.smoke_data
where
	1 = 1
	and (#{ppm} between smoke_data.Start_Int and smoke_data.End_Int);
</select>

<select id="selectBeforeMeasureDate" parameterType="BodyMeasureGrade" resultType="string">
	select 
	    measure_Date AS beforeMeasureDate
	from
	    measure_info
	where
	    member_id = #{member_id}
		and measure_date &#60; str_to_date(#{measureDate}, '%Y-%m-%d%')
	group by measure_date
	order by measure_date desc
	limit 1;
</select>

<select id="selectGradeRankingBySection" parameterType="BodyMeasureGrade" resultType="BodyMeasureGrade">
SELECT  T.ROWNUM AS SCHOOLGRADE, 
        @ROWNUM AS TOTALNUMBEROFSTUDENT           
FROM                                                                                                              
	(SELECT (@ROWNUM:=@ROWNUM + 1) AS ROWNUM, 
             A.*    
                                                                    
        FROM 
              (SELECT M.MEMBER_ID AS member_id,      
                      M.SEX,  
                      MI.SCHOOL_GRADE_ID,     
                      MI.SCHOOL_ID,                                                                   
                      MI.MEASURE_DATE AS MEASUREDATE,                                                                                                                             
     						TRUNCATE(II.HEIGHT, 1) AS VALUE                                                                                                         
              
                 FROM MEMBER M, 
                      measure_info MI, 
                      (SELECT SCHOOL_ID, 
                              SCHOOL_GRADE_ID
                       FROM measure_info
                       WHERE MEMBER_ID = #{member_id}
                          AND DATE_FORMAT(MEASURE_DATE, '%Y%m') = DATE_FORMAT(#{measureDate}, '%Y%m')) BB,
                      INBODY_INFO II                                             
     
         	     WHERE 1 = 1                                                                                                     
           		   	  AND M.SEX   = #{sex}                                                                  
           		      AND MI.SCHOOL_ID = BB.SCHOOL_ID                                                           
           			  AND MI.SCHOOL_GRADE_ID  = BB.SCHOOL_GRADE_ID                                                      
           		      AND DATE_FORMAT(MI.MEASURE_DATE, '%Y%m') = DATE_FORMAT(#{measureDate}, '%Y%m')   
           		      AND M.MEMBER_ID = MI.MEMBER_ID                                            
           		      AND MI.INBODY_SEQ = II.INBODY_SEQ                                                                                                                                                                     
 						ORDER BY II.HEIGHT  DESC                                                                                    
  				  ) A, 
              (SELECT @ROWNUM:=0) RNUM
     ) T                                                                      
  WHERE T.member_id = #{member_id}; 
</select>

<select id="selectBeforeGradeRankingBySection" parameterType="BodyMeasureGrade" resultType="BodyMeasureGrade">
SELECT  T.ROWNUM AS BEFORESCHOOLGRADE, 
        @ROWNUM AS BEFOREVALUE           
FROM                                                                                                              
	(SELECT (@ROWNUM:=@ROWNUM + 1) AS ROWNUM, 
             A.*    
                                                                    
        FROM 
              (SELECT M.MEMBER_ID AS member_id,      
                      M.SEX,  
                      MI.SCHOOL_GRADE_ID,     
                      MI.SCHOOL_ID,                                                                   
                      MI.MEASURE_DATE AS MEASUREDATE,                                                                                                                             
     						TRUNCATE(II.HEIGHT, 1) AS VALUE                                                                                                         
              
                 FROM MEMBER M, 
                      measure_info MI, 
                      (SELECT SCHOOL_ID, 
                              SCHOOL_GRADE_ID
                       FROM measure_info
                       WHERE MEMBER_ID = #{member_id}
                          AND DATE_FORMAT(MEASURE_DATE, '%Y%m') = DATE_FORMAT(#{beforeMeasureDate}, '%Y%m')) BB,
                      INBODY_INFO II                                             
     
         	     WHERE 1 = 1                                                                                                     
           		   	  AND M.SEX   = #{sex}                                                                  
           		      AND MI.SCHOOL_ID = BB.SCHOOL_ID                                                           
           			  AND MI.SCHOOL_GRADE_ID  = BB.SCHOOL_GRADE_ID                                                      
           		      AND DATE_FORMAT(MI.MEASURE_DATE, '%Y%m') = DATE_FORMAT(#{beforeMeasureDate}, '%Y%m')   
           		      AND M.MEMBER_ID = MI.MEMBER_ID                                            
           		      AND MI.INBODY_SEQ = II.INBODY_SEQ                                                                                                                                                                     
 						ORDER BY II.HEIGHT  DESC                                                                                    
  				  ) A, 
              (SELECT @ROWNUM:=0) RNUM
     ) T                                                                      
  WHERE T.member_id = #{member_id}; 
</select>

<select id="selectRankInGwangmyeong" parameterType="BodyMeasureGrade" resultType="java.util.Map">
select 
	(select 
			count(*)
			
		from 
			healthcare_gwangmyeong.body_measure_plan BP, 
			healthcare_gwangmyeong.student_info SI, 
			healthcare_gwangmyeong.inbody_info II
		where  
			BP.Student_ID = SI.student_id 
			and BP.Inbody_seq = II.Inbody_seq
			and SI.STU_Sex=#{sex} and BP.Grade_id=#{schoolGradeId}
			and DATE_FORMAT(BP.Measure_Date, '%Y%m') = DATE_FORMAT(#{measureDate}, '%Y%m')
	) total,
	(select 
			count(*)
			
		from 
			healthcare_gwangmyeong.body_measure_plan BP, 
			healthcare_gwangmyeong.student_info SI, 
			healthcare_gwangmyeong.inbody_info II
		where  
			BP.Student_ID = SI.student_id 
			and BP.Inbody_seq = II.Inbody_seq
			and SI.STU_Sex=#{sex} and BP.Grade_id=#{schoolGradeId}
			and DATE_FORMAT(BP.Measure_Date, '%Y%m') = DATE_FORMAT(#{measureDate}, '%Y%m')
			<choose>                                                                                                  
       			<when test="section == 'Height'">        
					and II.HEIGHT > #{value}
				</when>
				<when test="section == 'Weight'">  
					and II.WEIGHT > #{value}
				</when>
			</choose>
	) rank
</select>

<select id="selectBeforeRankInGwangmyeong" parameterType="BodyMeasureGrade" resultType="java.util.Map">
select 
	(select 
			count(*)
			
		from 
			healthcare_gwangmyeong.body_measure_plan BP, 
			healthcare_gwangmyeong.student_info SI, 
			healthcare_gwangmyeong.inbody_info II
		where  
			BP.Student_ID = SI.student_id 
			and BP.Inbody_seq = II.Inbody_seq
			and SI.STU_Sex=#{sex} and BP.Grade_id=#{schoolGradeId}
			and DATE_FORMAT(BP.Measure_Date, '%Y%m') = DATE_FORMAT(#{beforeMeasureDate}, '%Y%m')
	) total,
	(select 
			count(*)
			
		from 
			healthcare_gwangmyeong.body_measure_plan BP, 
			healthcare_gwangmyeong.student_info SI, 
			healthcare_gwangmyeong.inbody_info II
		where  
			BP.Student_ID = SI.student_id 
			and BP.Inbody_seq = II.Inbody_seq
			and SI.STU_Sex=#{sex} and BP.Grade_id=#{schoolGradeId}
			and DATE_FORMAT(BP.Measure_Date, '%Y%m') = DATE_FORMAT(#{beforeMeasureDate}, '%Y%m')
			<choose>                                                                                                  
       			<when test="section == 'Height'">        
					and II.HEIGHT > #{beforeValue}
				</when>
				<when test="section == 'Weight'">  
					and II.WEIGHT > #{beforeValue}
				</when>
			</choose>
	) rank
</select>

<select id="selectAveragePerSchool" parameterType="StatisticsParam" resultType="AverageItem">
	select 
		DATE_FORMAT(MI.Measure_Date, '%Y%m') AS measureDate,
	    S.School_Name AS name,
	    <choose>
			<when test="section == 'Height'">
				truncate(avg(II.Height), 1) AS value
			</when>
			<when test="section == 'Weight'">
				truncate(avg(II.Weight), 1) AS value
			</when>
			<when test="section == 'BMI'">
				truncate(avg(II.BMI), 2) AS value
			</when>
		</choose>
		from
			MEMBER M, 
			measure_info MI, 
			school S,
            INBODY_INFO II  
		where
			M.MEMBER_ID = MI.MEMBER_ID 
			AND MI.school_id = S.school_id
			AND MI.INBODY_SEQ = II.INBODY_SEQ 
			AND M.SEX   = #{sex}                                                                 
			AND MI.SCHOOL_ID =  #{schoolId}                                                        
           	AND MI.SCHOOL_GRADE_ID  = #{schoolGradeId}                                        
			AND DATE_FORMAT(MI.MEASURE_DATE, '%Y%m') = DATE_FORMAT(#{measureDate}, '%Y%m')   
 
		group by MI.school_id	
</select>

<!-- 광명시 통계, 아직 통계데이터가 많지 않으므로 local 통계는 광명시 데이터로 대신한다. -->
<select id="selectAveragePerLocal" parameterType="StatisticsParam" resultType="AverageItem">
	select 
		DATE_FORMAT(BP.Measure_Date, '%Y%m') AS measureDate,
		'local average' AS name,
		<choose>
			<when test="section == 'Height'">
			truncate(avg(II.HEIGHT), 1) AS value
			</when>
			<when test="section == 'Weight'">
			truncate(avg(II.Weight), 1) AS value
			</when>
			<when test="section == 'BMI'">
			truncate(avg(II.BMI), 2) AS value
			</when>
		</choose>
	from 
		healthcare_gwangmyeong.body_measure_plan BP, 
		healthcare_gwangmyeong.student_info SI, 
		healthcare_gwangmyeong.inbody_info II
	where  
		BP.Student_ID = SI.student_id 
		and BP.Inbody_seq = II.Inbody_seq
		and SI.STU_Sex=#{sex} and BP.Grade_id=#{schoolGradeId}
		and DATE_FORMAT(BP.Measure_Date, '%Y%m') = DATE_FORMAT(#{measureDate}, '%Y%m')
	group by BP.Measure_Date
</select>

<select id="selectAveragePerNation" parameterType="StatisticsParam" resultType="AverageItem">
	select
		standard_data.Year AS measureDate, 
	    'nation average' as name,
	    standard_data.value 
		from
		    healthcare_gwangmyeong.ms_grade_data,
			healthcare_gwangmyeong.standard_data
		where
			ms_grade_data.Grade_ID = #{schoolGradeId}
				and ms_grade_data.sex = #{sex}
				and ms_grade_data.Section = #{section}
				and standard_data.Year = DATE_FORMAT(#{measureDate}, '%Y')
				and ms_grade_data.Srandard_Grade = '표준'
				and standard_data.Ms_Grade_ID = ms_grade_data.Ms_Grade_ID;
</select>

<select id="selectSchoolListOfMember" parameterType="SchoolVO" resultType="SchoolVO">
	select * from school
	where school_id in (
		SELECT school_id FROM healthcare.member
		group by school_id
	)
	order by school_name
	Limit #{start_index}, #{page_size}
</select>

<select id="countSchoolListOfMember" resultType="Integer">
	select count(*) from school
	where school_id in (
		SELECT school_id FROM healthcare.member
		group by school_id
	)
</select>

<update id="updateSchool" parameterType="SchoolVO">
	UPDATE SCHOOL
	<set>
		<if test="school_name != null">school_name=#{school_name},</if>
		<if test="address != null">address=#{address},</if>
		<if test="zipcode != null">zipcode=#{zipcode},</if>
		<if test="gubun1 != null">gubun1=#{gubun1},</if>
		<if test="gubun2 != null">gubun2=#{gubun2},</if>
		<if test="homepage != null">homepage=#{homepage},</if>
		<if test="fax != null">fax=#{fax},</if>
		<if test="contact != null">contact=#{contact},</if>
		<if test="sido != null">sido=#{sido},</if>
		<if test="gugun != null">gugun=#{gugun},</if>
		<if test="lat != null">lat=#{lat},</if>
		<if test="lng != null">lng=#{lng}</if>
	</set>
	WHERE school_id = #{school_id} 
</update>

<insert id="insertSchoolNoti" parameterType="SchoolNoti">
	INSERT INTO 
		school_noti(school_id, category, title, content, noti_date) 
		values(#{school_id}, #{category}, #{title}, #{content}, #{noti_date});
</insert>

<update id="updateSchoolNoti" parameterType="SchoolNoti">
	UPDATE school_noti
	<set>
		<if test="category != null">category=#{category},</if>
		<if test="title != null">title=#{title},</if>
		<if test="content != null">content=#{content},</if>
		<if test="noti_date != null">noti_date=#{noti_date}</if>
	</set>
	WHERE noti_seq = #{noti_seq} 
</update>

<delete id="deleteSchoolNoti" parameterType="SchoolNoti">
	Delete From school_noti
	Where noti_seq = #{noti_seq}
</delete>

<select id="selectSchoolNotiList" parameterType="SchoolNoti" resultType="SchoolNoti">
	SELECT noti_seq, school_id, category, title, content,
		DATE_FORMAT(noti_date, '%Y-%m-%d') as 'noti_date' FROM SCHOOL_NOTI
	WHERE school_id = #{school_id} 
	Order By noti_date desc
	<if test="page_size != 0">
		Limit #{start_index}, #{page_size}
	</if>
</select>

<select id="countSchoolNotiList" parameterType="SchoolNoti" resultType="Integer">
	SELECT count(*) FROM SCHOOL_NOTI
	WHERE school_id = #{school_id} 
</select>

</mapper>